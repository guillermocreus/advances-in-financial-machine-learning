forecastDTst <- head(forecastDTst, length(forecastDTst) - 1)
forecastDTst <- as.xts(forecastDTst,
order.by = tail(index(dataDTst), length(forecastDTst)))
forecastRetTst <- modelRet %>% predict(dataRetTst[, -ncol(dataRetTst)])
forecastRetTst <- head(forecastRetTst, length(forecastRetTst) - 1)
forecastRetTst <- as.xts(forecastRetTst,
order.by = tail(index(dataRetTst), length(forecastRetTst)))
forecastRet2Tst <- modelRet2 %>% predict(dataRetTst[, -ncol(dataRetTst)])
forecastRet2Tst <- head(forecastRet2Tst, length(forecastRet2Tst) - 1)
forecastRet2Tst <- as.xts(forecastRet2Tst,
order.by = tail(index(dataRetTst), length(forecastRet2Tst)))
length(head(forecastDTst))
forecastDTst
length(head(forecastDTst, 10))
forecastDTst <- model %>% predict(dataDTst[, -ncol(dataDTst)])
forecastDTst <- head(forecastDTst, length(forecastDTst) - 1)
forecastDTst <- as.xts(forecastDTst,
order.by = tail(index(dataDTst), length(forecastDTst)))
forecastRetTst <- modelRet %>% predict(dataRetTst[, -ncol(dataRetTst)])
forecastRetTst <- head(forecastRetTst, length(forecastRetTst) - 1)
forecastRetTst <- as.xts(forecastRetTst,
order.by = tail(index(dataRetTst), length(forecastRetTst)))
forecastRet2Tst <- modelRet2 %>% predict(dataRetTst[, -ncol(dataRetTst)])
forecastRet2Tst <- head(forecastRet2Tst, length(forecastRet2Tst) - 1)
forecastRet2Tst <- as.xts(forecastRet2Tst,
order.by = tail(index(dataRetTst), length(forecastRet2Tst)))
source("fracDiffUtils.R")
sequentialForecast
tail(dataDTrn)
head(dataDTrn)
tail(dataDTrn)
head(dataDTst)
completeFracDiff_FFD
GSPC["2017-07-13"]
y <- GSPC$GSPC.Close
yD <- completeFracDiff_FFD(y, y, d, th)
length(yD)
nrow(GSPC)
plot(yD)
wInv <- getInverseWeights_FFD(d, th, length(yD))
head(forecastDTst)
str(forecastDTst)
head(forecastDTst)
tail(yD)
yIntD <- sequentialForecast(forecastDTst, yD, d, th, wInv)
y <- log(GSPC$GSPC.Close)
yD <- completeFracDiff_FFD(y, y, d, th)
# wInv <- getInverseWeights_FFD(d, th, length(yD))
yIntD <- sequentialForecast(forecastDTst, yD, d, th, wInv)
plotTimeSeries(cbind(y, yIntD))
which(is.na(yIntD))
which(is.na(y))
yIntD["2017-07-13"]
y["2017-07-13"]
y["2017-07-14"]
yIntD["2017-07-14"]
yIntD["2017-07-15"]
yIntD["2017-07-16"]
yIntD["2017-07-17"]
yIntD["2017-07-18"]
plot(yD)
d
sequentialForecast
plot(forecastDTst)
plot(yD[index(forecastDTst)])
plot(dataDTst$Label)
forecastDTst <- unNormalizeData(forecastDTst,
mins = minDTrn["Close"], maxs = maxDTrn["Close"])
y <- log(GSPC$GSPC.Close)
yD <- completeFracDiff_FFD(y, y, d, th)
forecastDTst <- unNormalizeData(forecastDTst,
mins = minDTrn["Close"], maxs = maxDTrn["Close"])
plot(forecastDTst)
plot(yD[index(forecastDTst)])
aux <- unNormalizeData(dataDTst$Label,
mins = minDTrn["Close"], maxs = maxDTrn["Close"])
plot(aux)
forecastDTst <- model %>% predict(dataDTst[, -ncol(dataDTst)])
forecastDTst <- head(forecastDTst, length(forecastDTst) - 1)
forecastDTst <- as.xts(forecastDTst,
order.by = tail(index(dataDTst), length(forecastDTst)))
head(cbind(forecastDTst, dataDTst$Label))
aux <- unNormalizeData(cbind(na.omit(dataDTst$Label, forecastDTst)),
mins = minDTrn["Close"], maxs = maxDTrn["Close"])
head(aux)
aux <- unNormalizeData(na.omit(cbind(dataDTst$Label, forecastDTst)),
mins = minDTrn["Close"], maxs = maxDTrn["Close"])
head(aux)
head(na.omit(cbind(dataDTst$Label, forecastDTst)))
unNormalizeData
dim(na.omit(cbind(dataDTst$Label, forecastDTst)))
aux <- unNormalizeData(dataDTst$Label,
mins = minDTrn["Close"], maxs = maxDTrn["Close"])
aux <- unNormalizeData(forecastDTst,
mins = minDTrn["Close"], maxs = maxDTrn["Close"])
aux <- unNormalizeData(dataDTst$Label,
mins = minDTrn["Close"], maxs = maxDTrn["Close"])
aux2 <- unNormalizeData(forecastDTst,
mins = minDTrn["Close"], maxs = maxDTrn["Close"])
head(aux)
head(aux2)
plot(aux)
plot(aux2)
forecastDTst <- unNormalizeData(forecastDTst,
mins = minDTrn["Close"], maxs = maxDTrn["Close"])
plot(forecastDTst)
plot(yD)
plot(yD[index(forecastDTst)])
plot(forecastDTst)
forecastDTst <- model %>% predict(dataDTst[, -ncol(dataDTst)])
forecastDTst <- head(forecastDTst, length(forecastDTst) - 1)
forecastDTst <- as.xts(forecastDTst,
order.by = tail(index(dataDTst), length(forecastDTst)))
forecastRetTst <- modelRet %>% predict(dataRetTst[, -ncol(dataRetTst)])
forecastRetTst <- head(forecastRetTst, length(forecastRetTst) - 1)
forecastRetTst <- as.xts(forecastRetTst,
order.by = tail(index(dataRetTst), length(forecastRetTst)))
forecastRet2Tst <- modelRet2 %>% predict(dataRetTst[, -ncol(dataRetTst)])
forecastRet2Tst <- head(forecastRet2Tst, length(forecastRet2Tst) - 1)
forecastRet2Tst <- as.xts(forecastRet2Tst,
order.by = tail(index(dataRetTst), length(forecastRet2Tst)))
y <- log(GSPC$GSPC.Close)
yD <- completeFracDiff_FFD(y, y, d, th)
forecastDTst <- unNormalizeData(forecastDTst,
mins = minDTrn["Close"], maxs = maxDTrn["Close"])
yD["2017-07-13"]
yD["2017-07-14"]
yD["2017-07-15"]
forecastDTst["2017-07-13"]
forecastDTst["2017-07-14"]
forecastDTst["2017-07-15"]
forecastDTst["2017-07-17"]
forecastDTst["2017-07-16"]
tail(index(forecastDTst))
tail(index(yD))
forecastDTst <- model %>% predict(dataDTst[, -ncol(dataDTst)])
head(forecastDTst)
tail(y)
tail(dataDTst)
tail(ddTst)
forecastDTst <- model %>% predict(dataDTst[, -ncol(dataDTst)])
forecastDTst <- head(forecastDTst, length(forecastDTst) - 1)
forecastDTst <- as.xts(forecastDTst,
order.by = c(tail(index(dataDTst), length(forecastDTst)),
tail(index(ddTst), 1)))
forecastDTst <- model %>% predict(dataDTst[, -ncol(dataDTst)])
forecastDTst <- as.xts(forecastDTst,
order.by = c(tail(index(dataDTst), length(forecastDTst)),
tail(index(ddTst), 1)))
forecastDTst <- model %>% predict(dataDTst[, -ncol(dataDTst)])
forecastDTst <- as.xts(forecastDTst,
order.by = c(tail(index(dataDTst), length(forecastDTst) - 1),
tail(index(ddTst), 1)))
forecastRetTst <- modelRet %>% predict(dataRetTst[, -ncol(dataRetTst)])
forecastRetTst <- as.xts(forecastRetTst,
order.by = c(tail(index(dataRetTst), length(forecastRetTst) - 1),
tail(index(ddTst), 1)))
forecastRet2Tst <- modelRet2 %>% predict(dataRetTst[, -ncol(dataRetTst)])
forecastRet2Tst <- as.xts(forecastRet2Tst,
order.by = c(tail(index(dataRetTst), length(forecastRet2Tst) - 1),
tail(index(ddTst), 1)))
y <- log(GSPC$GSPC.Close)
yD <- completeFracDiff_FFD(y, y, d, th)
forecastDTst <- unNormalizeData(forecastDTst,
mins = minDTrn["Close"], maxs = maxDTrn["Close"])
# wInv <- getInverseWeights_FFD(d, th, length(yD))
yIntD <- sequentialForecast(forecastDTst, yD, d, th, wInv)
plotTimeSeries(cbind(y, yIntD))
plotTimeSeries(cbind(yIntD))
plotTimeSeries(cbind(y, yIntD)[3000:3400, ])
plotTimeSeries(cbind(y, yIntD)[3200:3400, ])
plotTimeSeries(cbind(y, yIntD)[3300:3400, ])
plotTimeSeries(cbind(y, stats::lag(y), yIntD)[3300:3400, ])
plotTimeSeries(cbind(stats::lag(y), yIntD)[3300:3400, ])
plotTimeSeries(cbind(y, stats::lag(y), yIntD)[3300:3400, ])
timeSeries2Plot <- cbind(y, stats::lag(y), yIntD)
colnames(timeSeries2Plot) <- c("y", "y_lagged", "y_FracDiff")
plotTimeSeries(timeSeries2Plot[3300:3400, ])
plotTimeSeries(timeSeries2Plot[3300:3400, 1:2])
tail(timeSeries2Plot, 50)
plotTimeSeries(timeSeries2Plot["2017-07/"], title = "Out-of-sample performance Frac Diff")
plotTimeSeries(timeSeries2Plot["2017-09/2017-12"])
plotTimeSeries(timeSeries2Plot["2017-09/2017-10"])
plotTimeSeries(timeSeries2Plot["2017-09-01/2017-10-01"])
timeSeries2Plot["2017-09-01/2017-10-01"]
plotTimeSeries(timeSeries2Plot["2017-09-01/2017-09-10"])
y <- log(GSPC$GSPC.Close)
timeSeries2Plot <- cbind(y, stats::lag(y), yIntD)
colnames(timeSeries2Plot) <- c("y", "y_lagged", "y_FracDiff")
plotTimeSeries(timeSeries2Plot["2017-09-01/2017-09-10"])
plotTimeSeries(timeSeries2Plot["2017-09/2017-12"])
plotTimeSeries(timeSeries2Plot["2018-05/2018-09"],
title = "Out-of-sample performance Frac Diff")
plotTimeSeries(timeSeries2Plot["2017-09/2017-12"],
title = "Out-of-sample performance Frac Diff")
plotTimeSeries(timeSeries2Plot["2018-05/2018-09"],
title = "Out-of-sample performance Frac Diff")
wInvRet <- rep(1, length(yD))
yRet <- completeFracDiff_FFD(y, y, 1, th)
yIntRet <- sequentialForecast(forecastRetTst, yRet, 1, th, wInvRet)
wInvRet <- rep(1, length(yD))
yRet <- completeFracDiff_FFD(y, y, 1, th)
forecastRetTst <- unNormalizeData(forecastRetTst,
mins = minRetTrn["Close"], maxs = maxRetTrn["Close"])
forecastRet2Tst <- unNormalizeData(forecastRet2Tst,
mins = minRetTrn["Close"], maxs = maxRetTrn["Close"])
forecastRetTst <- modelRet %>% predict(dataRetTst[, -ncol(dataRetTst)])
forecastRetTst <- as.xts(forecastRetTst,
order.by = c(tail(index(dataRetTst), length(forecastRetTst) - 1),
tail(index(ddTst), 1)))
forecastRet2Tst <- modelRet2 %>% predict(dataRetTst[, -ncol(dataRetTst)])
forecastRet2Tst <- as.xts(forecastRet2Tst,
order.by = c(tail(index(dataRetTst), length(forecastRet2Tst) - 1),
tail(index(ddTst), 1)))
wInvRet <- rep(1, length(yD))
yRet <- completeFracDiff_FFD(y, y, 1, th)
forecastRetTst <- unNormalizeData(forecastRetTst,
mins = minRetTrn["Close"], maxs = maxRetTrn["Close"])
forecastRet2Tst <- unNormalizeData(forecastRet2Tst,
mins = minRetTrn["Close"], maxs = maxRetTrn["Close"])
yIntRet <- sequentialForecast(forecastRetTst, yRet, 1, th, wInvRet)
yIntRet2 <- sequentialForecast(forecastRet2Tst, yRet, 1, th, wInvRet)
timeSeries2Plot <- cbind(y, stats::lag(y), yIntRet, yIntRet2)
colnames(timeSeries2Plot) <- c("y", "y_lagged", "y_Returns1", "y_Returns2")
plotTimeSeries(timeSeries2Plot["2017-07/"],
title = "Out-of-sample performance Returns Models")
plotTimeSeries(timeSeries2Plot["2017-09/2017-12"],
title = "Out-of-sample performance Returns Models")
plotTimeSeries(timeSeries2Plot["2018-05/2018-09"],
title = "Out-of-sample performance Returns Models")
timeSeries2Plot["2018-05/2018-09"]
plotTimeSeries(timeSeries2Plot["2018-05/2018-06"],
title = "Out-of-sample performance Returns Models")
plotTimeSeries(timeSeries2Plot["2018-05-01/2018-05-20"],
title = "Out-of-sample performance Returns Models")
allTimeSeries <- cbind(y, yIntD, yIntRet, yIntRet2)
allTimeSeries <- cbind(y, stats::lag(y), yIntD, yIntRet, yIntRet2)
colnames(allTimeSeries) <- c("y", "y_lagged", "y_FracDiff", "y_Returns1", "y_Returns2")
plotTimeSeries(allTimeSeries, title = "Out-of-sample performance")
realRMSED <- sqrt(sum((y- yIntD)^2)/length(yIntD))
realRMSERet <- sqrt(sum((y - yIntRet)^2)/length(yIntRet))
realRMSERet2 <- sqrt(sum((y - yIntRet2)^2)/length(yIntRet2))
realRMSEFracDiff <- sqrt(sum((y- yIntD)^2)/length(yIntD))
realRMSENaive <- sqrt(sum((y[2:length(y)] - stats::lag(y))^2)/length(y))
realRMSEFracDiff <- sqrt(sum((y- yIntD)^2)/length(yIntD))
realRMSERet <- sqrt(sum((y - yIntRet)^2)/length(yIntRet))
realRMSERet2 <- sqrt(sum((y - yIntRet2)^2)/length(yIntRet2))
print(c("RMSE Naive" = realRMSENaive,
"RMSE FD" = realRMSEFracDiff,
"RMSE Returns - V1" = realRMSERet,
"RMSE Returns - V2" = realRMSERet2))
yAux <- y["2017-07/"]
yLagAux <- stats::lag(y)["2017-07"]
length(yLagAux)
yLagAux <- stats::lag(y)["2017-07/"]
length(yLagAux)
length(yAux)
yAux <- y["2017-07/"]
yLagAux <- stats::lag(y)["2017-07/"]
realRMSENaive <- sqrt(sum((yAux - yLagAux)^2)/length(yIntD))
realRMSEFracDiff <- sqrt(sum((y- yIntD)^2)/length(yIntD))
realRMSERet <- sqrt(sum((y - yIntRet)^2)/length(yIntRet))
realRMSERet2 <- sqrt(sum((y - yIntRet2)^2)/length(yIntRet2))
print(c("RMSE Naive" = realRMSENaive,
"RMSE FD" = realRMSEFracDiff,
"RMSE Returns - V1" = realRMSERet,
"RMSE Returns - V2" = realRMSERet2))
print(100*c("RMSE Naive" = realRMSENaive,
"RMSE FD" = realRMSEFracDiff,
"RMSE Returns - V1" = realRMSERet,
"RMSE Returns - V2" = realRMSERet2))
print(1000*c("RMSE Naive" = realRMSENaive,
"RMSE FD" = realRMSEFracDiff,
"RMSE Returns - V1" = realRMSERet,
"RMSE Returns - V2" = realRMSERet2))
plotTimeSeries(allTimeSeries["2017-07/"], title = "Out-of-sample performance")
plotTimeSeries(allTimeSeries["2018-07/2018-10"], title = "Out-of-sample performance")
plotTimeSeries(allTimeSeries["2019-03/2019-06"], title = "Out-of-sample performance")
(6.279862 - 6.149562)/6.149562
plot(history$metrics$loss)
plot(history$metrics$loss[4000:5000])
plot(history$metrics$val_loss[4000:5000])
plot(history$metrics$val_loss[3000:5000])
plot(history$metrics$val_loss[2000:5000])
plot(history$metrics$val_loss[1000:5000])
plot(history$metrics$val_loss[4500:5000])
min(history$metrics$val_loss)
min(history$metrics$loss)
set.seed(1998)
model <- keras_model_sequential() %>%
layer_flatten(input_shape = ncol(dataDTrn) - 1) %>%
layer_dense(units = 4, activation = "elu",
kernel_initializer = initializer_random_uniform(minval = -0.05,
maxval = 0.05,
seed = 104)) %>%
layer_dense(units = 1, activation = "elu",
kernel_initializer = initializer_random_uniform(minval = -0.05,
maxval = 0.05,
seed = 104))
model %>% compile(
# optimizer = keras::optimizer_sgd(0.01, momentum = 0.9),
optimizer = "adam",
loss = "mse"
)
history <- model %>% fit(
x = dataDTrn[, -ncol(dataDTrn)],
y = dataDTrn$Label,
epochs = 5000,
batch_size = 256,
validation_split = 0.15,
verbose = 1
)
history <- model %>% fit(
x = dataDTrn[, -ncol(dataDTrn)],
y = dataDTrn$Label,
epochs = 5000,
batch_size = 256,
validation_split = 0.15,
verbose = 1
)
getSymbols("^GSPC", from = as.Date("2005-01-01"), to = as.Date("2020-09-01"))
dd <- log(GSPC[, c("GSPC.Open", "GSPC.Close", "GSPC.High", "GSPC.Low")])
colnames(dd) <- c("Open", "Close", "High", "Low")
nTrn <- as.integer(0.8*nrow(dd))
knitr::opts_chunk$set(echo = TRUE)
library(xts)  # Time series framework
library(ggplot2)  # Fancy plots
library(quantmod)  # Candle charts
dd <- read.table("spy.txt", header = FALSE, sep = "",
dec = ".", stringsAsFactors = FALSE)
dd <- data.frame(apply(dd[-1, ], 2, as.numeric))
colnames(dd) <- c("Date", "Bin", "Volume", "Price")
sum(dd$Volume[1:26])
# Day: 2012-12-28
# Volume: 123,486,362
# Price: 132.75
# Actual volume: 2,426,680,000
# Actual price: 1,402.43
sum(dd$Volume[27:52])
# Day: 2012-12-31
# Volume: 218,373,347
# Price: 132.2830
# Actual volume: 3,204,330,000
# Actual price: 1,426.19
expandDate <- function(s) {
# yyyymmdd
year <- substr(s, 1, 4)
month <- substr(s, 5, 6)
day <- substr(s, 7, 8)
return(paste(year, month, day, sep = "-"))
}
dates <- unlist(lapply(dd$Date, expandDate))
nBins <- 26
startTrading <- 9.5
endTrading <- 16
dd <- apply(dd[, 3:4], 2, as.numeric)
intra <- NULL
for (k in 1:(nrow(dd)/nBins)) {
if (k == 1) {
intra <- startTrading*60*60 + seq(as.POSIXct(dates[(k - 1)*nBins + 1]),
by = 60*60*(endTrading - startTrading)/(nBins - 1),
length.out = nBins)
} else if (k > 1) {
intra <- c(intra,
startTrading*60*60 + seq(as.POSIXct(dates[(k - 1)*nBins + 1]),
by = 60*60*(endTrading - startTrading)/(nBins - 1),
length.out = nBins))
}
}
dd <- xts(dd, order.by = intra)
head(dd)
meanVolume <- 0
sum <- 0
for (k in 1:(nrow(dd)/nBins)) {
sum <- sum + as.numeric(sum(dd$Volume[(k - 1)*nBins + 1:nBins]))
}
meanVolume <- sum/(nrow(dd)/nBins)
# 97,586,165  (Average daily volume)
getDailyVolumeBars <- function(prices, volume, delta = 3.7e6) {
# Delta = 3.7e6 - Standard value
# Objective: generate volume-sampled candles
# Time: time stamp of the last time bar
# Open
# High
# Low
# Close
times <- index(prices)[1]
times <- times[-1]
bars <- c()
volAcc <- 0
residualVol <- 0
lastReset <- 1
for (k in 1:length(prices)) {
volAcc <- volAcc + as.numeric(volume[k])
while (volAcc > delta) {
# Open
open <- as.numeric(prices[lastReset])
# High
high <- max(prices[lastReset:k])
# Low
low <- min(prices[lastReset:k])
# Close
close <- as.numeric(prices[k])
bars <- rbind(bars, c(open, high, low, close))
times <- c(times, index(prices)[k])
lastReset <- k
volAcc <- volAcc - delta
}
}
colnames(bars) <- c("Open", "High", "Low", "Close")
bars <- xts(bars, order.by = times)
return(bars)
}
MRes <- getDailyVolumeBars(prices = dd$Price, volume = dd$Volume, delta = 4e6)
head(MRes)
df <- cbind(dd, dd)
colnames(df) <- c("Open", "High", "Low", "Close")
df[, ] <- NA
df[index(MRes), ] <- MRes
chartSeries(df[1:50, ])
chartSeries(df)
candleChart(df, multi.col = TRUE, theme = 'white')
library(plotly)
dfComplete <- df
for (k in 1:nrow(dfComplete)) {
if (k == 1) {
dfComplete[k, ] <- rep(132, ncol(dfComplete))
} else if (is.na(dfComplete[k, 1])) {
dfComplete[k, ] <- rep(dfComplete$Close[k - 1], ncol(dfComplete))
}
}
dfAux <- data.frame(Bars = 1:nrow(MRes), coredata(MRes))[1:30, ]
fig <- dfAux %>% plot_ly(x = ~Bars, type = "candlestick",
open = ~Open, close = ~Close,
high = ~High, low = ~Low)
fig <- fig %>% layout(title = "Basic Candlestick Chart")
fig
volRet <- na.omit(diff(log(MRes$Close)))
h <- hist(volRet, breaks = 100, prob = TRUE, col = "lightgray",
xlab = "return", main = "Histogram of log-returns")
xfit <- seq(min(volRet), max(volRet), length = 100)
yfit <- dnorm(xfit, mean = mean(volRet), sd = 0.85*sd(volRet))
lines(xfit, yfit, col = "blue", lwd = 2)
MRes <- getDailyVolumeBars(prices = dd$Price, volume = dd$Volume, delta = 100e6)
head(MRes)
dfAux <- data.frame(Bars = 1:nrow(MRes), coredata(MRes))[1:30, ]
fig <- dfAux %>% plot_ly(x = ~Bars, type = "candlestick",
open = ~Open, close = ~Close,
high = ~High, low = ~Low)
fig <- fig %>% layout(title = "Basic Candlestick Chart")
fig
dim(MRes)
volRet <- na.omit(diff(log(MRes$Close)))
h <- hist(volRet, breaks = 100, prob = TRUE, col = "lightgray",
xlab = "return", main = "Histogram of log-returns")
xfit <- seq(min(volRet), max(volRet), length = 100)
yfit <- dnorm(xfit, mean = mean(volRet), sd = 0.85*sd(volRet))
lines(xfit, yfit, col = "blue", lwd = 2)
h <- hist(volRet, breaks = 100, prob = TRUE, col = "lightgray",
xlab = "return", main = "Histogram of log-returns")
xfit <- seq(min(volRet), max(volRet), length = 100)
yfit <- dnorm(xfit, mean = mean(volRet), sd = 0.85*sd(volRet))
lines(xfit, yfit, col = "blue", lwd = 2)
h <- hist(volRet, breaks = 100, prob = TRUE, col = "lightgray",
xlab = "return", main = "Histogram of log-returns")
xfit <- seq(min(volRet), max(volRet), length = 100)
yfit <- dnorm(xfit, mean = mean(volRet), sd = sd(volRet))
lines(xfit, yfit, col = "blue", lwd = 2)
head(dd)
tail(dd)
GSPC <- getSymbols("^GSPC", from = index(dd)[1], to = tail(index(dd),),
auto.assign = FALSE)
prices <- Cl(GSPC)
R_daily <- diff(log(prices))[-1]
plot(R_daily, col = 'blue', lwd = 1, ylab = "log-return", main = "S&P 500 index")
h <- hist(as.vector(R_daily), breaks = 100, prob = TRUE, col = "lightgray",
xlab = "return", main = "Histogram of log-returns")
xfit <- seq(min(R_daily), max(R_daily), length = 100)
yfit <- dnorm(xfit, mean = mean(R_daily), sd = 0.85*sd(R_daily))
lines(xfit, yfit, col = "blue", lwd = 2)
qqnorm(R_daily, col = "blue", main = "QQ plot of log-returns")
qqline(R_daily, lwd = 2)
volRet
plot(volRet, col = "blue", lwd = 1)
plot(as.vector(volRet), col = "blue", lwd = 1)
plot(as.vector(volRet), col = "blue", lwd = 1, type = "l")
plot(as.vector(volRet), col = "blue", lwd = 1, type = "l", xlab = NULL, ylab = "returns")
plot(as.vector(volRet), col = "blue", lwd = 1, type = "l", xlab = "", ylab = "returns")
plot(as.vector(volRet), col = "blue", lwd = 1, type = "l",
xlab = "", ylab = "returns", main = "Log-returns sampled by volume")
h <- hist(volRet, breaks = 100, prob = TRUE, col = "lightgray",
xlab = "return", main = "Histogram of log-returns")
xfit <- seq(min(volRet), max(volRet), length = 100)
yfit <- dnorm(xfit, mean = mean(volRet), sd = sd(volRet))
lines(xfit, yfit, col = "blue", lwd = 2)
qqnorm(volRet, col = "blue", main = "QQ plot of log-returns")
qqline(volRet, lwd = 2)
GSPC <- getSymbols("^GSPC", from = index(dd)[1], to = tail(index(dd),),
auto.assign = FALSE)
prices <- Cl(GSPC)
R_daily <- diff(log(prices))[-1]
plot(R_daily, col = "blue", lwd = 1, ylab = "log-return",
main = "Returns sampled by time")
h <- hist(as.vector(R_daily), breaks = 100, prob = TRUE, col = "lightgray",
xlab = "return", main = "Histogram of log-returns")
xfit <- seq(min(R_daily), max(R_daily), length = 100)
yfit <- dnorm(xfit, mean = mean(R_daily), sd = 0.85*sd(R_daily))
lines(xfit, yfit, col = "blue", lwd = 2)
qqnorm(R_daily, col = "blue", main = "QQ plot of log-returns")
qqline(R_daily, lwd = 2)
head(dd)
head(dd, 30)
