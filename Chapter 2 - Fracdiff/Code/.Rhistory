kernel_initializer = initializer_random_uniform(minval = -0.05,
maxval = 0.05,
seed = 104)) %>%
layer_dense(units = 1, activation = "elu",
kernel_initializer = initializer_random_uniform(minval = -0.05,
maxval = 0.05,
seed = 104))
model <- keras_model_sequential() %>%
layer_flatten(input_shape = ncol(dataDTrn) - 1) %>%
layer_dense(units = 4, activation = "elu",
kernel_initializer = initializer_random_uniform(minval = -0.05,
maxval = 0.05,
seed = 104)) %>%
layer_dense(units = 1, activation = "elu",
kernel_initializer = initializer_random_uniform(minval = -0.05,
maxval = 0.05,
seed = 104))
model %>% compile(
optimizer = keras::optimizer_sgd(0.01, momentum = 0.9),
loss = "mse"
)
history <- model %>% fit(
x = dataDTrn[, -ncol(dataDTrn)],
y = dataDTrn$Label,
epochs = 5000,
batch_size = 256,
validation_split = 0.15,
verbose = 0
)
set.seed(1998)
modelRet <- keras_model_sequential() %>%
layer_flatten(input_shape = ncol(dataRetTrn) - 1) %>%
layer_dense(units = 4, activation = "elu",
kernel_initializer = initializer_random_uniform(minval = -0.05,
maxval = 0.05,
seed = 104)) %>%
layer_dense(units = 1, activation = "elu",
kernel_initializer = initializer_random_uniform(minval = -0.05,
maxval = 0.05,
seed = 104))
modelRet %>% compile(
optimizer = keras::optimizer_sgd(0.01, momentum = 0.9),
loss = "mse"
)
historyRet <- modelRet %>% fit(
x = dataRetTrn[, -ncol(dataRetTrn)],
y = dataRetTrn$Label,
epochs = 5000,
batch_size = 256,
validation_split = 0.15,
verbose = 0
)
modelRet2 <- keras_model_sequential() %>%
layer_flatten(input_shape = ncol(dataRetTrn) - 1) %>%
layer_dense(units = 4, activation = "sigmoid",
kernel_initializer = initializer_random_uniform(minval = -0.05,
maxval = 0.05,
seed = 104)) %>%
layer_dense(units = 1, activation = "sigmoid",
kernel_initializer = initializer_random_uniform(minval = -0.05,
maxval = 0.05,
seed = 104))
set.seed(1998)
modelRet <- keras_model_sequential() %>%
layer_flatten(input_shape = ncol(dataRetTrn) - 1) %>%
layer_dense(units = 4, activation = "elu",
kernel_initializer = initializer_random_uniform(minval = -0.05,
maxval = 0.05,
seed = 104)) %>%
layer_dense(units = 1, activation = "elu",
kernel_initializer = initializer_random_uniform(minval = -0.05,
maxval = 0.05,
seed = 104))
modelRet %>% compile(
optimizer = keras::optimizer_sgd(0.01, momentum = 0.9),
loss = "mse"
)
historyRet <- modelRet %>% fit(
x = dataRetTrn[, -ncol(dataRetTrn)],
y = dataRetTrn$Label,
epochs = 5000,
batch_size = 256,
validation_split = 0.15,
verbose = 0
)
modelRet2 <- keras_model_sequential() %>%
layer_flatten(input_shape = ncol(dataRetTrn) - 1) %>%
layer_dense(units = 4, activation = "sigmoid",
kernel_initializer = initializer_random_uniform(minval = -0.05,
maxval = 0.05,
seed = 104)) %>%
layer_dense(units = 1, activation = "sigmoid",
kernel_initializer = initializer_random_uniform(minval = -0.05,
maxval = 0.05,
seed = 104))
modelRet2 %>% compile(
optimizer = keras::optimizer_sgd(0.01, momentum = 0.9),
loss = "mse"
)
historyRet2 <- modelRet2 %>% fit(
x = dataRetTrn[, -ncol(dataRetTrn)],
y = dataRetTrn$Label,
epochs = 5000,
batch_size = 256,
validation_split = 0.15,
verbose = 0
)
yHatDTst <- as.xts(model %>% predict(dataDTst[, -ncol(dataDTst)]),
order.by = index(dataDTst))
aux <- yHatDTst
aux <- yHatDTst[1]
aux
stats::lag(aux)
stats::lag(index(dataDTst))
head(stats::lag(index(dataDTst)))
head(stats::lag(index(dataDTst)))
head(index(dataDTst))
forecastDTst <- model %>% predict(dataDTst[, -ncol(dataDTst)])
forecastDTst <- head(forecastDTst, length(forecastDTst) - 1)
forecastDTst <- model %>% predict(dataDTst[, -ncol(dataDTst)])
head(forecastDTst)
forecastDTst <- head(forecastDTst, length(forecastDTst) - 1)
head(forecastDTst)
forecastDTst <- model %>% predict(dataDTst[, -ncol(dataDTst)])
forecastDTst <- head(forecastDTst, length(forecastDTst) - 1)
forecastDTst <- as.xts(forecastDTst,
order.by = tail(index(dataDTst), length(forecastDTst)))
forecastRetTst <- modelRet %>% predict(dataRetTst[, -ncol(dataRetTst)])
forecastRetTst <- head(forecastRetTst, length(forecastRetTst) - 1)
forecastRetTst <- as.xts(forecastRetTst,
order.by = tail(index(dataRetTst), length(forecastRetTst)))
forecastRet2Tst <- modelRet2 %>% predict(dataRetTst[, -ncol(dataRetTst)])
forecastRet2Tst <- head(forecastRet2Tst, length(forecastRet2Tst) - 1)
forecastRet2Tst <- as.xts(forecastRet2Tst,
order.by = tail(index(dataRetTst), length(forecastRet2Tst)))
length(head(forecastDTst))
forecastDTst
length(head(forecastDTst, 10))
forecastDTst <- model %>% predict(dataDTst[, -ncol(dataDTst)])
forecastDTst <- head(forecastDTst, length(forecastDTst) - 1)
forecastDTst <- as.xts(forecastDTst,
order.by = tail(index(dataDTst), length(forecastDTst)))
forecastRetTst <- modelRet %>% predict(dataRetTst[, -ncol(dataRetTst)])
forecastRetTst <- head(forecastRetTst, length(forecastRetTst) - 1)
forecastRetTst <- as.xts(forecastRetTst,
order.by = tail(index(dataRetTst), length(forecastRetTst)))
forecastRet2Tst <- modelRet2 %>% predict(dataRetTst[, -ncol(dataRetTst)])
forecastRet2Tst <- head(forecastRet2Tst, length(forecastRet2Tst) - 1)
forecastRet2Tst <- as.xts(forecastRet2Tst,
order.by = tail(index(dataRetTst), length(forecastRet2Tst)))
source("fracDiffUtils.R")
sequentialForecast
tail(dataDTrn)
head(dataDTrn)
tail(dataDTrn)
head(dataDTst)
completeFracDiff_FFD
GSPC["2017-07-13"]
y <- GSPC$GSPC.Close
yD <- completeFracDiff_FFD(y, y, d, th)
length(yD)
nrow(GSPC)
plot(yD)
wInv <- getInverseWeights_FFD(d, th, length(yD))
head(forecastDTst)
str(forecastDTst)
head(forecastDTst)
tail(yD)
yIntD <- sequentialForecast(forecastDTst, yD, d, th, wInv)
y <- log(GSPC$GSPC.Close)
yD <- completeFracDiff_FFD(y, y, d, th)
# wInv <- getInverseWeights_FFD(d, th, length(yD))
yIntD <- sequentialForecast(forecastDTst, yD, d, th, wInv)
plotTimeSeries(cbind(y, yIntD))
which(is.na(yIntD))
which(is.na(y))
yIntD["2017-07-13"]
y["2017-07-13"]
y["2017-07-14"]
yIntD["2017-07-14"]
yIntD["2017-07-15"]
yIntD["2017-07-16"]
yIntD["2017-07-17"]
yIntD["2017-07-18"]
plot(yD)
d
sequentialForecast
plot(forecastDTst)
plot(yD[index(forecastDTst)])
plot(dataDTst$Label)
forecastDTst <- unNormalizeData(forecastDTst,
mins = minDTrn["Close"], maxs = maxDTrn["Close"])
y <- log(GSPC$GSPC.Close)
yD <- completeFracDiff_FFD(y, y, d, th)
forecastDTst <- unNormalizeData(forecastDTst,
mins = minDTrn["Close"], maxs = maxDTrn["Close"])
plot(forecastDTst)
plot(yD[index(forecastDTst)])
aux <- unNormalizeData(dataDTst$Label,
mins = minDTrn["Close"], maxs = maxDTrn["Close"])
plot(aux)
forecastDTst <- model %>% predict(dataDTst[, -ncol(dataDTst)])
forecastDTst <- head(forecastDTst, length(forecastDTst) - 1)
forecastDTst <- as.xts(forecastDTst,
order.by = tail(index(dataDTst), length(forecastDTst)))
head(cbind(forecastDTst, dataDTst$Label))
aux <- unNormalizeData(cbind(na.omit(dataDTst$Label, forecastDTst)),
mins = minDTrn["Close"], maxs = maxDTrn["Close"])
head(aux)
aux <- unNormalizeData(na.omit(cbind(dataDTst$Label, forecastDTst)),
mins = minDTrn["Close"], maxs = maxDTrn["Close"])
head(aux)
head(na.omit(cbind(dataDTst$Label, forecastDTst)))
unNormalizeData
dim(na.omit(cbind(dataDTst$Label, forecastDTst)))
aux <- unNormalizeData(dataDTst$Label,
mins = minDTrn["Close"], maxs = maxDTrn["Close"])
aux <- unNormalizeData(forecastDTst,
mins = minDTrn["Close"], maxs = maxDTrn["Close"])
aux <- unNormalizeData(dataDTst$Label,
mins = minDTrn["Close"], maxs = maxDTrn["Close"])
aux2 <- unNormalizeData(forecastDTst,
mins = minDTrn["Close"], maxs = maxDTrn["Close"])
head(aux)
head(aux2)
plot(aux)
plot(aux2)
forecastDTst <- unNormalizeData(forecastDTst,
mins = minDTrn["Close"], maxs = maxDTrn["Close"])
plot(forecastDTst)
plot(yD)
plot(yD[index(forecastDTst)])
plot(forecastDTst)
forecastDTst <- model %>% predict(dataDTst[, -ncol(dataDTst)])
forecastDTst <- head(forecastDTst, length(forecastDTst) - 1)
forecastDTst <- as.xts(forecastDTst,
order.by = tail(index(dataDTst), length(forecastDTst)))
forecastRetTst <- modelRet %>% predict(dataRetTst[, -ncol(dataRetTst)])
forecastRetTst <- head(forecastRetTst, length(forecastRetTst) - 1)
forecastRetTst <- as.xts(forecastRetTst,
order.by = tail(index(dataRetTst), length(forecastRetTst)))
forecastRet2Tst <- modelRet2 %>% predict(dataRetTst[, -ncol(dataRetTst)])
forecastRet2Tst <- head(forecastRet2Tst, length(forecastRet2Tst) - 1)
forecastRet2Tst <- as.xts(forecastRet2Tst,
order.by = tail(index(dataRetTst), length(forecastRet2Tst)))
y <- log(GSPC$GSPC.Close)
yD <- completeFracDiff_FFD(y, y, d, th)
forecastDTst <- unNormalizeData(forecastDTst,
mins = minDTrn["Close"], maxs = maxDTrn["Close"])
yD["2017-07-13"]
yD["2017-07-14"]
yD["2017-07-15"]
forecastDTst["2017-07-13"]
forecastDTst["2017-07-14"]
forecastDTst["2017-07-15"]
forecastDTst["2017-07-17"]
forecastDTst["2017-07-16"]
tail(index(forecastDTst))
tail(index(yD))
forecastDTst <- model %>% predict(dataDTst[, -ncol(dataDTst)])
head(forecastDTst)
tail(y)
tail(dataDTst)
tail(ddTst)
forecastDTst <- model %>% predict(dataDTst[, -ncol(dataDTst)])
forecastDTst <- head(forecastDTst, length(forecastDTst) - 1)
forecastDTst <- as.xts(forecastDTst,
order.by = c(tail(index(dataDTst), length(forecastDTst)),
tail(index(ddTst), 1)))
forecastDTst <- model %>% predict(dataDTst[, -ncol(dataDTst)])
forecastDTst <- as.xts(forecastDTst,
order.by = c(tail(index(dataDTst), length(forecastDTst)),
tail(index(ddTst), 1)))
forecastDTst <- model %>% predict(dataDTst[, -ncol(dataDTst)])
forecastDTst <- as.xts(forecastDTst,
order.by = c(tail(index(dataDTst), length(forecastDTst) - 1),
tail(index(ddTst), 1)))
forecastRetTst <- modelRet %>% predict(dataRetTst[, -ncol(dataRetTst)])
forecastRetTst <- as.xts(forecastRetTst,
order.by = c(tail(index(dataRetTst), length(forecastRetTst) - 1),
tail(index(ddTst), 1)))
forecastRet2Tst <- modelRet2 %>% predict(dataRetTst[, -ncol(dataRetTst)])
forecastRet2Tst <- as.xts(forecastRet2Tst,
order.by = c(tail(index(dataRetTst), length(forecastRet2Tst) - 1),
tail(index(ddTst), 1)))
y <- log(GSPC$GSPC.Close)
yD <- completeFracDiff_FFD(y, y, d, th)
forecastDTst <- unNormalizeData(forecastDTst,
mins = minDTrn["Close"], maxs = maxDTrn["Close"])
# wInv <- getInverseWeights_FFD(d, th, length(yD))
yIntD <- sequentialForecast(forecastDTst, yD, d, th, wInv)
plotTimeSeries(cbind(y, yIntD))
plotTimeSeries(cbind(yIntD))
plotTimeSeries(cbind(y, yIntD)[3000:3400, ])
plotTimeSeries(cbind(y, yIntD)[3200:3400, ])
plotTimeSeries(cbind(y, yIntD)[3300:3400, ])
plotTimeSeries(cbind(y, stats::lag(y), yIntD)[3300:3400, ])
plotTimeSeries(cbind(stats::lag(y), yIntD)[3300:3400, ])
plotTimeSeries(cbind(y, stats::lag(y), yIntD)[3300:3400, ])
timeSeries2Plot <- cbind(y, stats::lag(y), yIntD)
colnames(timeSeries2Plot) <- c("y", "y_lagged", "y_FracDiff")
plotTimeSeries(timeSeries2Plot[3300:3400, ])
plotTimeSeries(timeSeries2Plot[3300:3400, 1:2])
tail(timeSeries2Plot, 50)
plotTimeSeries(timeSeries2Plot["2017-07/"], title = "Out-of-sample performance Frac Diff")
plotTimeSeries(timeSeries2Plot["2017-09/2017-12"])
plotTimeSeries(timeSeries2Plot["2017-09/2017-10"])
plotTimeSeries(timeSeries2Plot["2017-09-01/2017-10-01"])
timeSeries2Plot["2017-09-01/2017-10-01"]
plotTimeSeries(timeSeries2Plot["2017-09-01/2017-09-10"])
y <- log(GSPC$GSPC.Close)
timeSeries2Plot <- cbind(y, stats::lag(y), yIntD)
colnames(timeSeries2Plot) <- c("y", "y_lagged", "y_FracDiff")
plotTimeSeries(timeSeries2Plot["2017-09-01/2017-09-10"])
plotTimeSeries(timeSeries2Plot["2017-09/2017-12"])
plotTimeSeries(timeSeries2Plot["2018-05/2018-09"],
title = "Out-of-sample performance Frac Diff")
plotTimeSeries(timeSeries2Plot["2017-09/2017-12"],
title = "Out-of-sample performance Frac Diff")
plotTimeSeries(timeSeries2Plot["2018-05/2018-09"],
title = "Out-of-sample performance Frac Diff")
wInvRet <- rep(1, length(yD))
yRet <- completeFracDiff_FFD(y, y, 1, th)
yIntRet <- sequentialForecast(forecastRetTst, yRet, 1, th, wInvRet)
wInvRet <- rep(1, length(yD))
yRet <- completeFracDiff_FFD(y, y, 1, th)
forecastRetTst <- unNormalizeData(forecastRetTst,
mins = minRetTrn["Close"], maxs = maxRetTrn["Close"])
forecastRet2Tst <- unNormalizeData(forecastRet2Tst,
mins = minRetTrn["Close"], maxs = maxRetTrn["Close"])
forecastRetTst <- modelRet %>% predict(dataRetTst[, -ncol(dataRetTst)])
forecastRetTst <- as.xts(forecastRetTst,
order.by = c(tail(index(dataRetTst), length(forecastRetTst) - 1),
tail(index(ddTst), 1)))
forecastRet2Tst <- modelRet2 %>% predict(dataRetTst[, -ncol(dataRetTst)])
forecastRet2Tst <- as.xts(forecastRet2Tst,
order.by = c(tail(index(dataRetTst), length(forecastRet2Tst) - 1),
tail(index(ddTst), 1)))
wInvRet <- rep(1, length(yD))
yRet <- completeFracDiff_FFD(y, y, 1, th)
forecastRetTst <- unNormalizeData(forecastRetTst,
mins = minRetTrn["Close"], maxs = maxRetTrn["Close"])
forecastRet2Tst <- unNormalizeData(forecastRet2Tst,
mins = minRetTrn["Close"], maxs = maxRetTrn["Close"])
yIntRet <- sequentialForecast(forecastRetTst, yRet, 1, th, wInvRet)
yIntRet2 <- sequentialForecast(forecastRet2Tst, yRet, 1, th, wInvRet)
timeSeries2Plot <- cbind(y, stats::lag(y), yIntRet, yIntRet2)
colnames(timeSeries2Plot) <- c("y", "y_lagged", "y_Returns1", "y_Returns2")
plotTimeSeries(timeSeries2Plot["2017-07/"],
title = "Out-of-sample performance Returns Models")
plotTimeSeries(timeSeries2Plot["2017-09/2017-12"],
title = "Out-of-sample performance Returns Models")
plotTimeSeries(timeSeries2Plot["2018-05/2018-09"],
title = "Out-of-sample performance Returns Models")
timeSeries2Plot["2018-05/2018-09"]
plotTimeSeries(timeSeries2Plot["2018-05/2018-06"],
title = "Out-of-sample performance Returns Models")
plotTimeSeries(timeSeries2Plot["2018-05-01/2018-05-20"],
title = "Out-of-sample performance Returns Models")
allTimeSeries <- cbind(y, yIntD, yIntRet, yIntRet2)
allTimeSeries <- cbind(y, stats::lag(y), yIntD, yIntRet, yIntRet2)
colnames(allTimeSeries) <- c("y", "y_lagged", "y_FracDiff", "y_Returns1", "y_Returns2")
plotTimeSeries(allTimeSeries, title = "Out-of-sample performance")
realRMSED <- sqrt(sum((y- yIntD)^2)/length(yIntD))
realRMSERet <- sqrt(sum((y - yIntRet)^2)/length(yIntRet))
realRMSERet2 <- sqrt(sum((y - yIntRet2)^2)/length(yIntRet2))
realRMSEFracDiff <- sqrt(sum((y- yIntD)^2)/length(yIntD))
realRMSENaive <- sqrt(sum((y[2:length(y)] - stats::lag(y))^2)/length(y))
realRMSEFracDiff <- sqrt(sum((y- yIntD)^2)/length(yIntD))
realRMSERet <- sqrt(sum((y - yIntRet)^2)/length(yIntRet))
realRMSERet2 <- sqrt(sum((y - yIntRet2)^2)/length(yIntRet2))
print(c("RMSE Naive" = realRMSENaive,
"RMSE FD" = realRMSEFracDiff,
"RMSE Returns - V1" = realRMSERet,
"RMSE Returns - V2" = realRMSERet2))
yAux <- y["2017-07/"]
yLagAux <- stats::lag(y)["2017-07"]
length(yLagAux)
yLagAux <- stats::lag(y)["2017-07/"]
length(yLagAux)
length(yAux)
yAux <- y["2017-07/"]
yLagAux <- stats::lag(y)["2017-07/"]
realRMSENaive <- sqrt(sum((yAux - yLagAux)^2)/length(yIntD))
realRMSEFracDiff <- sqrt(sum((y- yIntD)^2)/length(yIntD))
realRMSERet <- sqrt(sum((y - yIntRet)^2)/length(yIntRet))
realRMSERet2 <- sqrt(sum((y - yIntRet2)^2)/length(yIntRet2))
print(c("RMSE Naive" = realRMSENaive,
"RMSE FD" = realRMSEFracDiff,
"RMSE Returns - V1" = realRMSERet,
"RMSE Returns - V2" = realRMSERet2))
print(100*c("RMSE Naive" = realRMSENaive,
"RMSE FD" = realRMSEFracDiff,
"RMSE Returns - V1" = realRMSERet,
"RMSE Returns - V2" = realRMSERet2))
print(1000*c("RMSE Naive" = realRMSENaive,
"RMSE FD" = realRMSEFracDiff,
"RMSE Returns - V1" = realRMSERet,
"RMSE Returns - V2" = realRMSERet2))
plotTimeSeries(allTimeSeries["2017-07/"], title = "Out-of-sample performance")
plotTimeSeries(allTimeSeries["2018-07/2018-10"], title = "Out-of-sample performance")
plotTimeSeries(allTimeSeries["2019-03/2019-06"], title = "Out-of-sample performance")
(6.279862 - 6.149562)/6.149562
plot(history$metrics$loss)
plot(history$metrics$loss[4000:5000])
plot(history$metrics$val_loss[4000:5000])
plot(history$metrics$val_loss[3000:5000])
plot(history$metrics$val_loss[2000:5000])
plot(history$metrics$val_loss[1000:5000])
plot(history$metrics$val_loss[4500:5000])
min(history$metrics$val_loss)
min(history$metrics$loss)
set.seed(1998)
model <- keras_model_sequential() %>%
layer_flatten(input_shape = ncol(dataDTrn) - 1) %>%
layer_dense(units = 4, activation = "elu",
kernel_initializer = initializer_random_uniform(minval = -0.05,
maxval = 0.05,
seed = 104)) %>%
layer_dense(units = 1, activation = "elu",
kernel_initializer = initializer_random_uniform(minval = -0.05,
maxval = 0.05,
seed = 104))
model %>% compile(
# optimizer = keras::optimizer_sgd(0.01, momentum = 0.9),
optimizer = "adam",
loss = "mse"
)
history <- model %>% fit(
x = dataDTrn[, -ncol(dataDTrn)],
y = dataDTrn$Label,
epochs = 5000,
batch_size = 256,
validation_split = 0.15,
verbose = 1
)
history <- model %>% fit(
x = dataDTrn[, -ncol(dataDTrn)],
y = dataDTrn$Label,
epochs = 5000,
batch_size = 256,
validation_split = 0.15,
verbose = 1
)
getSymbols("^GSPC", from = as.Date("2005-01-01"), to = as.Date("2020-09-01"))
dd <- log(GSPC[, c("GSPC.Open", "GSPC.Close", "GSPC.High", "GSPC.Low")])
colnames(dd) <- c("Open", "Close", "High", "Low")
nTrn <- as.integer(0.8*nrow(dd))
library(ggplot2)  # Fancy plots
library(reshape2)  # Melting data frame
library(xts)  # Time series
library(tseries)  # Augmented Dickey Fuller (ADF) Test
library(pracma)  # Dividing and multiplying polynomials
library(dplyr)  # %>%
library(randomForest)  # Train Random Forests
library(quantmod)  # Download Symbols
library(stats)  # Lag a Time Series
# _____ NN _____
library(keras)
library(tensorflow)
tensorflow::tf$random$set_seed(1998)
load(file = "~/Dropbox/Otros/clean_returns_GMVP.RData")
GMVPPrices <- cumprod(1 + GMVP_returns)
GMVPLogPrices <- log(GMVPPrices)
source("plots.R")
source("fracDiffUtils.R")
normalizeData <- function(dd, mins = NULL, maxs = NULL) {
if (is.null(dim(dd))) {
if (is.null(mins[1]) | is.null(maxs[1])) {
return((dd - min(dd))/(max(dd) - min(dd)))
}
return((dd - mins)/(maxs - mins))
}
if (is.null(mins) | is.null(maxs)) {
mins <- apply(dd, 2, min)
maxs <- apply(dd, 2, max)
}
for (k in 1:ncol(dd)) {
dd[, k] <- (dd[, k] - mins[k])/(maxs[k] - mins[k])
}
return(dd)
}
unNormalizeData <- function(dd, mins, maxs) {
if (is.null(dim(dd))) {
return(dd*(maxs - mins) + mins)
}
for (k in 1:ncol(dd)) {
dd[, k] <- dd[, k]*(maxs[k] - mins[k]) + mins[k]
}
return(dd)
}
getSymbols("^GSPC", from = as.Date("2005-01-01"), to = as.Date("2020-09-01"))
dd <- log(GSPC[, c("GSPC.Open", "GSPC.Close", "GSPC.High", "GSPC.Low")])
colnames(dd) <- c("Open", "Close", "High", "Low")
nTrn <- as.integer(0.8*nrow(dd))
n <- nrow(dd)
ddTrn <- dd[1:nTrn, ]
ddTst <- dd[-c(1:nTrn), ]
d <- 0.25
th <- 1e-4
dataD <- na.omit(apply(dd, 2, fracDiff_FFD, d = d, th = th))
dataD <- as.xts(dataD, order.by = as.Date(rownames(dataD)))
apply(dataD, 2, adf.test)
dataDTrn <- dataD[index(ddTrn)]
dataDTst <- dataD[index(ddTst), ]
dataRet <- na.omit(apply(dd, 2, diff))
dataRet <- as.xts(dataRet, order.by = as.Date(rownames(dataRet)))
apply(dataRet, 2, adf.test)
plot(dd$Close)
plot(dd$Close, title = "hh")
plot(dd$Close, main = "hh")
plot(dd$Close, main = "S&P500 log-price")
